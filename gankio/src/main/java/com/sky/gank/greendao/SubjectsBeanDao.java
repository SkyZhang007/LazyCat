package com.sky.gank.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sky.gank.converter.ListStringConverter;
import com.sky.gank.data.douban.SubjectsBean.CastsBeanConverter;
import com.sky.gank.data.douban.SubjectsBean.DirectorsBeanConverter;
import com.sky.gank.data.douban.SubjectsBean.ImagesBean;
import com.sky.gank.data.douban.SubjectsBean.ImagesBeanConverter;
import com.sky.gank.data.douban.SubjectsBean.RatingBean;
import com.sky.gank.data.douban.SubjectsBean.RatingBeanConverter;
import java.util.List;

import com.sky.gank.data.douban.SubjectsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUBJECTS_BEAN".
*/
public class SubjectsBeanDao extends AbstractDao<SubjectsBean, String> {

    public static final String TABLENAME = "SUBJECTS_BEAN";

    /**
     * Properties of entity SubjectsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Rating = new Property(1, String.class, "rating", false, "RATING");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Collect_count = new Property(3, int.class, "collect_count", false, "COLLECT_COUNT");
        public final static Property Original_title = new Property(4, String.class, "original_title", false, "ORIGINAL_TITLE");
        public final static Property Subtype = new Property(5, String.class, "subtype", false, "SUBTYPE");
        public final static Property Year = new Property(6, String.class, "year", false, "YEAR");
        public final static Property Images = new Property(7, String.class, "images", false, "IMAGES");
        public final static Property Alt = new Property(8, String.class, "alt", false, "ALT");
        public final static Property Genres = new Property(9, String.class, "genres", false, "GENRES");
        public final static Property Casts = new Property(10, String.class, "casts", false, "CASTS");
        public final static Property Directors = new Property(11, String.class, "directors", false, "DIRECTORS");
    }

    private final RatingBeanConverter ratingConverter = new RatingBeanConverter();
    private final ImagesBeanConverter imagesConverter = new ImagesBeanConverter();
    private final ListStringConverter genresConverter = new ListStringConverter();
    private final CastsBeanConverter castsConverter = new CastsBeanConverter();
    private final DirectorsBeanConverter directorsConverter = new DirectorsBeanConverter();

    public SubjectsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SubjectsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBJECTS_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"RATING\" TEXT," + // 1: rating
                "\"TITLE\" TEXT," + // 2: title
                "\"COLLECT_COUNT\" INTEGER NOT NULL ," + // 3: collect_count
                "\"ORIGINAL_TITLE\" TEXT," + // 4: original_title
                "\"SUBTYPE\" TEXT," + // 5: subtype
                "\"YEAR\" TEXT," + // 6: year
                "\"IMAGES\" TEXT," + // 7: images
                "\"ALT\" TEXT," + // 8: alt
                "\"GENRES\" TEXT," + // 9: genres
                "\"CASTS\" TEXT," + // 10: casts
                "\"DIRECTORS\" TEXT);"); // 11: directors
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBJECTS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubjectsBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        RatingBean rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(2, ratingConverter.convertToDatabaseValue(rating));
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getCollect_count());
 
        String original_title = entity.getOriginal_title();
        if (original_title != null) {
            stmt.bindString(5, original_title);
        }
 
        String subtype = entity.getSubtype();
        if (subtype != null) {
            stmt.bindString(6, subtype);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(7, year);
        }
 
        ImagesBean images = entity.getImages();
        if (images != null) {
            stmt.bindString(8, imagesConverter.convertToDatabaseValue(images));
        }
 
        String alt = entity.getAlt();
        if (alt != null) {
            stmt.bindString(9, alt);
        }
 
        List genres = entity.getGenres();
        if (genres != null) {
            stmt.bindString(10, genresConverter.convertToDatabaseValue(genres));
        }
 
        List casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(11, castsConverter.convertToDatabaseValue(casts));
        }
 
        List directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(12, directorsConverter.convertToDatabaseValue(directors));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubjectsBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        RatingBean rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(2, ratingConverter.convertToDatabaseValue(rating));
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getCollect_count());
 
        String original_title = entity.getOriginal_title();
        if (original_title != null) {
            stmt.bindString(5, original_title);
        }
 
        String subtype = entity.getSubtype();
        if (subtype != null) {
            stmt.bindString(6, subtype);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(7, year);
        }
 
        ImagesBean images = entity.getImages();
        if (images != null) {
            stmt.bindString(8, imagesConverter.convertToDatabaseValue(images));
        }
 
        String alt = entity.getAlt();
        if (alt != null) {
            stmt.bindString(9, alt);
        }
 
        List genres = entity.getGenres();
        if (genres != null) {
            stmt.bindString(10, genresConverter.convertToDatabaseValue(genres));
        }
 
        List casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(11, castsConverter.convertToDatabaseValue(casts));
        }
 
        List directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(12, directorsConverter.convertToDatabaseValue(directors));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SubjectsBean readEntity(Cursor cursor, int offset) {
        SubjectsBean entity = new SubjectsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : ratingConverter.convertToEntityProperty(cursor.getString(offset + 1)), // rating
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.getInt(offset + 3), // collect_count
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // original_title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // subtype
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // year
            cursor.isNull(offset + 7) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 7)), // images
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // alt
            cursor.isNull(offset + 9) ? null : genresConverter.convertToEntityProperty(cursor.getString(offset + 9)), // genres
            cursor.isNull(offset + 10) ? null : castsConverter.convertToEntityProperty(cursor.getString(offset + 10)), // casts
            cursor.isNull(offset + 11) ? null : directorsConverter.convertToEntityProperty(cursor.getString(offset + 11)) // directors
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubjectsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRating(cursor.isNull(offset + 1) ? null : ratingConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCollect_count(cursor.getInt(offset + 3));
        entity.setOriginal_title(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSubtype(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setYear(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImages(cursor.isNull(offset + 7) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 7)));
        entity.setAlt(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGenres(cursor.isNull(offset + 9) ? null : genresConverter.convertToEntityProperty(cursor.getString(offset + 9)));
        entity.setCasts(cursor.isNull(offset + 10) ? null : castsConverter.convertToEntityProperty(cursor.getString(offset + 10)));
        entity.setDirectors(cursor.isNull(offset + 11) ? null : directorsConverter.convertToEntityProperty(cursor.getString(offset + 11)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SubjectsBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SubjectsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SubjectsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
